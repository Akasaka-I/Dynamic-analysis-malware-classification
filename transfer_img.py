import csv
from PIL import Image, ImageColor
import numpy as np
import os
from tqdm import tqdm

# Define API categories
categories = [
    "networking", "register", "service", "file", "hardware and system",
    "message", "process and thread", "system", "Shellcode", "Keylogging",
    "Obfuscation", "password dumping/hash", "anti-debugging/reversing",
    "handle manipulation", "high risk", "other"
]

# Define color table
color_table = [
    ["API category", "0", "(0,3]", "(3,7]", "(7,12]", "(12,18]", "(18,25]", "(25,33]", "(33,42]", "(42,100]", "(100,200]", "(200,+âˆž]"],
    ["networking", "#FFFFFF", "#FFC1E0", "#FFAAD5", "#FF95CA", "#FF79BC", "#FF60AF", "#FF359A", "#FF0080", "#F00078", "#D9006C", "#BF0060"],
    ["register", "#FFFFFF", "#FFBFFF", "#FFA6FF", "#FF8EFF", "#FF77FF", "#FF44FF", "#FF00FF", "#E800E8", "#D200D2", "#AE00AE", "#930093"],
    ["service", "#FFFFFF", "#FFDAC8", "#FFCBB3", "#FFBD9D", "#FFAD86", "#FF9D6F", "#FF8F59", "#FF8040", "#FF5809", "#F75000", "#D94600"],
    ["file", "#FFFFFF", "#D3FF93", "#CCFF80", "#B7FF4A", "#A8FF24", "#9AFF02", "#8CEA00", "#82D900", "#73BF00", "#64A600", "#548C00"],
    ["hardware and system", "#FFFFFF", "#CAFFFF", "#BBFFFF", "#A6FFFF", "#4DFFFF", "#00FFFF", "#00E3E3", "#00CACA", "#00AEAE", "#009393", "#005757"],
    ["message", "#FFFFFF", "#C1FFE4", "#ADFEDC", "#96FED1", "#4EFEB3", "#1AFD9C", "#02F78E", "#02DF82", "#01B468", "#019858", "#01814A"],
    ["process and thread", "#FFFFFF", "#D6D6AD", "#CDCD9A", "#C2C287", "#B9B973", "#AFAF61", "#A5A552", "#949449", "#808040", "#707038", "#616130"],
    ["system", "#FFFFFF", "#DCB5FF", "#D3A4FF", "#CA8EFF", "#BE77FF", "#B15BFF", "#9F35FF", "#921AFF", "#8600FF", "#6E00FF", "#5B00AE"],
    ["Shellcode", "#FFFFFF", "#FFFF6F", "#FFFF37", "#F9F900", "#E1E100", "#C4C400", "#A6A600", "#8C8C00", "#737300", "#5B5B00", "#5B5B00"],
    ["Keylogging", "#FFFFFF", "#FFE66F", "#FFE153", "#FFDC35", "#FFD306", "#EAC100", "#D9B300", "#C6A300", "#AE8F00", "#977C00", "#796400"],
    ["Obfuscation", "#FFFFFF", "#D8D8EB", "#C7C7E2", "#B8B8DC", "#A6A6D2", "#9999CC", "#8080C0", "#7373B9", "#5A5AAD", "#5151A2", "#484891"],
    ["password dumping/hash", "#FFFFFF", "#97CBFF", "#84C1FF", "#66B3FF", "#46A3FF", "#2894FF", "#0080FF", "#0072E3", "#0066CC", "#005AB5", "#004B97"],
    ["anti-debugging/reversing", "#FFFFFF", "#B9B9FF", "#AAAAFF", "#9393FF", "#7D7DFF", "#6A6AFF", "#4A4AFF", "#2828FF", "#0000E3", "#0000C6", "#0000C6"],
    ["handle manipulation", "#FFFFFF", "#FFD1A4", "#FFC78E", "#FFBB77", "#FFAF60", "#FFA042", "#FF9224", "#FF8000", "#EA7500", "#D26900", "#BB5E00"],
    ["high risk", "#FFFFFF", "#FF9797", "#FF7575", "#FF5151", "#FF2D2D", "#FF0000", "#EA0000", "#CE0000", "#AE0000", "#930000", "#750000"],
    ["other", "#FFFFFF", "#93FF93", "#79FF79", "#53FF53", "#28FF28", "#00EC00", "#00DB00", "#00BB00", "#00A600", "#009100", "#007500"]
]

# Parse color intervals
call_ranges = [0, 3, 7, 12, 18, 25, 33, 42, 100, 200, float('inf')]
colors = {category[0]: category[1:] for category in color_table[1:]}

def get_color(value, category):
    for i in range(len(call_ranges)):
        if value <= call_ranges[i]:
            return colors[category][i]
    return colors[category][-1]

FOLDER_PATH = '/home/zero/Documents/HW1/virusCSV'

for folders in tqdm(os.listdir(FOLDER_PATH)):
    for files in tqdm(os.listdir(FOLDER_PATH + '/' + folders),leave=True):
        filename = files.split('.')[0]
        # Read CSV file data
        with open(FOLDER_PATH + '/' +folders + '/' + files, 'r') as file:
            reader = csv.DictReader(file)
            data = list(reader)

        # Skip empty files
        if not data:
            print(f"Skipping empty file: {files}")
            continue

        # Extract time data and calculate time intervals
        times = [float(row['Time']) for row in data]
        if not times:
            print(f"No valid time data in file: {files}")
            continue

        # Extract time data and calculate time intervals
        times = [float(row['Time']) for row in data]
        min_time = min(times)
        max_time = max(times)
        interval_length = (max_time - min_time) / 16
        intervals = [min_time + i * interval_length for i in range(17)]  # Generate 17 boundary points to form 16 intervals

        # Initialize the count matrix
        matrix = np.zeros((len(categories), 16), dtype=int)

        # Fill the matrix
        for row in data:
            category = row['Category'] if row['Category'] in categories else 'other'
            time = float(row['Time'])
            category_index = categories.index(category)
            interval_index = min(int((time - min_time) // interval_length), 15)  # Ensure the index does not exceed the maximum boundary
            matrix[category_index, interval_index] += 1

        # Create image
        width, height = 16, 16
        img = Image.new('RGB', (width, height), "white")
        pixels = img.load()
        not_white = 0

        # Apply colors to each pixel
        for i in range(height):
            for j in range(width):
                value = matrix[i][j]
                if value > 0:
                    not_white += 1
                category = categories[i]  # Use the corresponding row category
                color_code = get_color(value, category)
                pixels[j, i] = ImageColor.getcolor(color_code, "RGB")  # Convert color code to RGB


        # Save image
        output_folder = '/home/zero/Documents/HW1/virusImage/' + folders
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
        img.save(output_folder + '/' + filename + '.png')

print("ALL image files have been created successfully.")